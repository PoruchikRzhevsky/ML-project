#https://github.com/CodeReclaimers/neat-python/blob/master/examples/xor/config-feedforward

[NEAT] 
# Taking ships with the highest fitness
fitness_criterion     = max 
# What fitness lvl do we wanna reach
fitness_threshold     = 400 
# How many ships we wanna have
pop_size              = 20 
# If all the speacies that are extinct, do we wanna reset the population
reset_on_extinction   = False 

# Setting up connections between nodes
[DefaultGenome] 
# node activation options
# Activation function
activation_default      = tanh 
# Chance of changing activation function randomly
activation_mutate_rate  = 0.0 
# Options from which we can choose activation function if we set up mutation rate
activation_options      = tanh 

# node aggregation options
# Aggregation function (activation(bias+(responseâˆ—aggregation(inputs))))
aggregation_default     = sum 
# Chance of changing aggregation function randomly
aggregation_mutate_rate = 0.0 
# Options from which we can choose aggregation function if we set up mutation rate
aggregation_options     = sum 

# node bias options
# Initial mean of the bias
bias_init_mean          = 0.0 
# Initial standard deviation of the bias
bias_init_stdev         = 1.0 
# Maximum value of the bias
bias_max_value          = 30.0
# Minimum value of the bias
bias_min_value          = -30.0 
# The strength of the mutation that is applied to the bias values of the nodes
bias_mutate_power       = 0.5 
# The probability that a node's bias will be mutated when mutations occur
bias_mutate_rate        = 0.7 
# The probability that a node's bias will be replaced with a completely new value rather than just being mutated
bias_replace_rate       = 0.1 

# genome compatibility options
# How much the algorithm penalizes the existence of disjoint genes when calculating the compatibility distance between two genomes
compatibility_disjoint_coefficient = 1.0 
# How much the differences in weights impact the calculation of the compatibility distance
compatibility_weight_coefficient   = 0.5 

# connection add/remove rates
# The probability that a new connection will be added to the genome
conn_add_prob           = 0.5 
# The probability that an existing connection will be deleted from the genome
conn_delete_prob        = 0.5 

# connection enable options
# Whether or not new connections are enabled by default
enabled_default         = True 
# The probability that a connection will be disabled when mutations occur
enabled_mutate_rate     = 0.01 
# Whether or not the network is feed-forward
feed_forward            = True 
# All layers are fully connected
initial_connection      = full 

# node add/remove rates
# The probability that a new node will be added to the genome
node_add_prob           = 0.2 
# The probability that an existing node will be deleted from the genome
node_delete_prob        = 0.2 

# network parameters
# Number of hidden neurons
num_hidden              = 0 
# Number of input neurons
num_inputs              = 3 
# Number of output neurons
num_outputs             = 1 

# node response options (scales the output of the activation function for a neuron)
# Initial mean of the response
response_init_mean      = 1.0 
# Initial standard deviation of the response
response_init_stdev     = 0.0 
# Maximum value of the response
response_max_value      = 30.0 
# Minimum value of the response
response_min_value      = -30.0 
# The strength of the mutation that is applied to the response values of the nodes
response_mutate_power   = 0.0 
# The probability that a node's response will be mutated 
response_mutate_rate    = 0.0 
# The probability that a node's response will be replaced with a new randomly chosen value within the allowed range
response_replace_rate   = 0.0 

# connection weight options
# Average value of the weights when they are first initialized
weight_init_mean        = 0.0 
# Standard deviation of the weights when they are first initialized (normal distribution)
weight_init_stdev       = 1.0 
# Maximum value of the weights
weight_max_value        = 30 
# Minimum value of the weights
weight_min_value        = -30 
# The strength of the mutation that is applied to the weights
weight_mutate_power     = 0.5 
# The probability that a node's weight will be mutated 
weight_mutate_rate      = 0.8 
# The probability that a node's weight will be replaced with a new random value within the allowed ranged
weight_replace_rate     = 0.1 

[DefaultSpeciesSet]
# If the distance between two genomes is less than this threshold, they are considered to be in the same species
compatibility_threshold = 3.0 

[DefaultStagnation]
# We taking the best species
species_fitness_func = max 
# How many generations we go without increasing fitness
max_stagnation       = 20 
# How many of the best species will go to the next generation
species_elitism      = 2 

[DefaultReproduction]
# How many of the best genomes will go to the next generation without undergoing crossover or mutation
elitism            = 2 
# Determines what fraction of individuals in each species will be allowed to reproduce
survival_threshold = 0.2 